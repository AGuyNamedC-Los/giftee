{% extends "base.njk" %}

{% block metaStuff%}
	<title>Home</title>
{% endblock %}

{% block main%}
<section class="content">
    <h1>The Last Gift List You'll Need</h1>
    <div>
        <i class="fas fa-plus"></i>
        <div>
            <h2>Add whatever you want!</h2>
            <p>Add items from any website to your gift list instead of being limited to one website or keeping track of multiple gift lists from other websites</p>
        </div>
    </div>
    <div>
        <i class="far fa-save"></i>
        <div>
            <h2>Edit your items</h2>
            <p>Edit the attributes of your gifts whenever you need so you can keep them constantly updated if anything changes</p>
        </div>
    </div>
    <div>
        <i class="fas fa-share"></i>
        <div>
            <h2>Simple to share with others</h2>
            <p>Either send your link or have them search you up by username for them to see your awsome gift list!</p>
        </div>
    </div>
    <div>
        <i class="far fa-trash-alt"></i>
        <div>
            <h2>Delete them as you please</h2>
            <p>If you've already received a gift from your list or simply don't want it anymore, then simply delete it off your list!</p>
        </div>
    </div>
</section>
<h1>Try it out!</h1>
<div class="gift-container">
    <div class="gift-top"></div>
    <div class="button-1" onclick="showAddGift()">Add</div>
    <div class="gift-bottom"></div>
</div>
<section id="gift-list" class="container">
    <div draggable="true" class="gift draggable" onclick="showGift(this)", data-name="first", data-price="", data-quantity="", data-size="", data-color="", data-storelink="", data-notes="">
        <p>1</p>
        <p class="button-1">BUY</p>
    </div>
    <div draggable="true" class="gift draggable" onclick="showGift(this)", data-name="second", data-price="", data-quantity="", data-size="", data-color="", data-storelink="", data-notes="">
        <p>2</p>
        <p class="button-1">BUY</p>
    </div>
</section>
<section id="pop-up-bg">
    <!-- show add gift form -->
    <form id="add-gift" class="pop-up">
        <div class="input-box">
            <label for="">Name</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Price</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Quantity</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Size</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Color</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Store Link</label>
            <input type="text" name="">
        </div>
        <div class="input-box">
            <label for="">Notes</label>
            <textarea name=""></textarea>
        </div>
        <div class="btn-container">
            <button onclick="addGift(this.form)" class="button-1" type="button">ADD</button>
        </div>
    </form>
    <!-- show gift information -->
    <div class="pop-up" id="show-gift">
        <div class="input-box">
            <label for="">Name</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Price</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Quantity</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Size</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Color</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Store Link</label>
            <input type="text">
        </div>
        <div class="input-box">
            <label for="">Notes</label>
            <textarea name=""></textarea>
        </div>
        <div class="btn-container">
            <button class="button-1" onclick="saveChanges(this)">Save</button>
            <button class="button-1" onclick="deleteGift()">Delete</button>
        </div>
    </div>
</section>
{% endblock %}

{% block script %}
<script>
/*------------------------------------------ 
pop up
------------------------------------------*/
var popUpBg = document.getElementById("pop-up-bg");
var showGiftPopUp = document.getElementById("show-gift");
var addGiftPopUp = document.getElementById("add-gift");
var giftList = document.getElementById("gift-list");
var giftNode = document.getElementsByClassName("gift")[0];
var currentGift;

// allows for the pop up to be closed by clicking outside of the pop up
window.onclick = function(event) {
    if(event.target == popUpBg) {
        popUpBg.style.display = "none";
        showGiftPopUp.style.display = "none";
        addGiftPopUp.style.display = "none";
        currentGift = null;
    }
}

// display information about a particular gift
function showGift(gift) {
    popUpBg.style.display = "block";
    showGiftPopUp.style.display = "grid";
    addGiftPopUp.style.display = "none";
    let giftAttributes = document.getElementById("show-gift").children;
    let inputVals = Object.values(gift.dataset);

    // gets the values from the html element
    for (i = 0; i < inputVals.length; i++) {giftAttributes[i].children[1].value = inputVals[i];}

    currentGift = gift;
}

// show the form for adding a gift
function showAddGift() {
    popUpBg.style.display = "block";
    showGiftPopUp.style.display = "none";
    addGiftPopUp.style.display = "grid";
}

// save changes the user inputed for a given gift
function saveChanges(gift) {
    gift = gift.parentNode.parentNode;
    let inputs = gift.querySelectorAll("input, textarea");
    
    currentGift.dataset.name = inputs[0].value;
    currentGift.children[0].innerHTML = inputs[0].value;
    currentGift.dataset.price = inputs[1].value;
    currentGift.dataset.quantity = inputs[2].value;
    currentGift.dataset.size = inputs[3].value;
    currentGift.dataset.color = inputs[4].value;
    currentGift.dataset.storelink = inputs[5].value;
    currentGift.dataset.notes = inputs[6].value;
}

function deleteGift() {
    currentGift.remove();
    popUpBg.style.display = "none";
    showGiftPopUp.style.display = "none";
    addGiftPopUp.style.display = "none";
    currentGift = null;
}

function addGift(form) {
    let giftAttributes = form.children;
    let newGift = giftNode.cloneNode(true);

    newGift.dataset.name = giftAttributes[0].children[1].value;
    newGift.children[0].innerHTML = giftAttributes[0].children[1].value;
    newGift.dataset.price = giftAttributes[1].children[1].value;
    newGift.dataset.quantity = giftAttributes[2].children[1].value;
    newGift.dataset.size = giftAttributes[3].children[1].value;
    newGift.dataset.color = giftAttributes[4].children[1].value;
    newGift.dataset.storelink = giftAttributes[5].children[1].value;
    newGift.dataset.notes = giftAttributes[6].children[1].value;

    giftList.appendChild(newGift);
    // "turn off" the pop up
    popUpBg.style.display = "none";
    showGiftPopUp.style.display = "none";
    addGiftPopUp.style.display = "none";
}

/*------------------------------------------ 
    drag and drop
------------------------------------------*/
var draggables = document.querySelectorAll('.draggable');
var containers = document.querySelectorAll('.container');

document.addEventListener('dragstart', e => {
    console.log(e.target.classList);
    if (e.target && e.target.classList[1] == "draggable") {
        e.target.classList.add("dragging");
    }
});

document.addEventListener('dragend', e => {
    if (e.target && e.target.classList[1] == "draggable") {
        e.target.classList.remove("dragging");
    }
});

containers.forEach(container => {
    container.addEventListener('dragover', e => {
        e.preventDefault();
        const afterElement = getDragAfterElement(container, e.clientY);
        const draggable = document.querySelector('.dragging');

        if (afterElement == null) {
            container.appendChild(draggable);
        } else {
            container.insertBefore(draggable, afterElement);
        }
    });
});

function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]

    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child }
        } else {
            return closest
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element
}
</script>
{% endblock %}